{"id":"node_modules/pixi.js/lib/prepare/limiters/TimeLimiter.js","dependencies":[{"name":"C:\\Users\\olish\\sien\\node_modules\\pixi.js\\lib\\prepare\\limiters\\TimeLimiter.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\olish\\sien\\package.json","includedInParent":true,"mtime":1583959607397},{"name":"C:\\Users\\olish\\sien\\node_modules\\pixi.js\\package.json","includedInParent":true,"mtime":1583869125988}],"generated":{"js":"\"use strict\";\n\nexports.__esModule = true;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nvar TimeLimiter = function () {\n  /**\n   * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n   */\n  function TimeLimiter(maxMilliseconds) {\n    _classCallCheck(this, TimeLimiter);\n\n    /**\n     * The maximum milliseconds that can be spent preparing items each frame.\n     * @private\n     */\n    this.maxMilliseconds = maxMilliseconds;\n    /**\n     * The start time of the current frame.\n     * @type {number}\n     * @private\n     */\n    this.frameStart = 0;\n  }\n\n  /**\n   * Resets any counting properties to start fresh on a new frame.\n   */\n\n\n  TimeLimiter.prototype.beginFrame = function beginFrame() {\n    this.frameStart = Date.now();\n  };\n\n  /**\n   * Checks to see if another item can be uploaded. This should only be called once per item.\n   * @return {boolean} If the item is allowed to be uploaded.\n   */\n\n\n  TimeLimiter.prototype.allowedToUpload = function allowedToUpload() {\n    return Date.now() - this.frameStart < this.maxMilliseconds;\n  };\n\n  return TimeLimiter;\n}();\n\nexports.default = TimeLimiter;\n"},"sourceMaps":{"js":{"version":3,"sources":["../../../src/prepare/limiters/TimeLimiter.js"],"names":["TimeLimiter","maxMilliseconds","frameStart","beginFrame","Date","now","allowedToUpload"],"mappings":";;;;;;AAAA;;;;;;;IAOqBA,W;AAEjB;;;AAGA,uBAAYC,eAAZ,EACA;AAAA;;AACI;;;;AAIA,SAAKA,eAAL,GAAuBA,eAAvB;AACA;;;;;AAKA,SAAKC,UAAL,GAAkB,CAAlB;AACH;;AAED;;;;;wBAGAC,U,yBACA;AACI,SAAKD,UAAL,GAAkBE,KAAKC,GAAL,EAAlB;AACH,G;;AAED;;;;;;wBAIAC,e,8BACA;AACI,WAAOF,KAAKC,GAAL,KAAa,KAAKH,UAAlB,GAA+B,KAAKD,eAA3C;AACH,G;;;;;kBAnCgBD,W","file":"TimeLimiter.js","sourcesContent":["/**\n * TimeLimiter limits the number of items handled by a {@link PIXI.BasePrepare} to a specified\n * number of milliseconds per frame.\n *\n * @class\n * @memberof PIXI\n */\nexport default class TimeLimiter\n{\n    /**\n     * @param {number} maxMilliseconds - The maximum milliseconds that can be spent preparing items each frame.\n     */\n    constructor(maxMilliseconds)\n    {\n        /**\n         * The maximum milliseconds that can be spent preparing items each frame.\n         * @private\n         */\n        this.maxMilliseconds = maxMilliseconds;\n        /**\n         * The start time of the current frame.\n         * @type {number}\n         * @private\n         */\n        this.frameStart = 0;\n    }\n\n    /**\n     * Resets any counting properties to start fresh on a new frame.\n     */\n    beginFrame()\n    {\n        this.frameStart = Date.now();\n    }\n\n    /**\n     * Checks to see if another item can be uploaded. This should only be called once per item.\n     * @return {boolean} If the item is allowed to be uploaded.\n     */\n    allowedToUpload()\n    {\n        return Date.now() - this.frameStart < this.maxMilliseconds;\n    }\n}\n"]}},"error":null,"hash":"76ba31899f9910dc21b254320f8de955","cacheData":{"env":{}}}